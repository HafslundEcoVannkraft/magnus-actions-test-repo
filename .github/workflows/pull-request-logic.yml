
name: On PR

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: install gpg
        run: sudo apt update && sudo apt install gpg -y
      - name: import key
        run: gpg --import $GITHUB_WORKSPACE/id_gpg.pub
      - name: get token and encrypt
        run: |
          signed_token=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
          echo $signed_token | gpg --encrypt --armor --recipient magnus@longva.email --trust-model always
      
      # - name: test az account subscription
      #   run: |
      #     az account subscription --help
      #     az account subscription cancel --help
      
      - name: sponge
        run: |
          echo "hello" > test.txt
          echo "foobar" >> test.txt
          cat test.txt | grep foobar | sponge test.txt
          cat test.txt
      
      # - name: get token
      #   run: |
      #     #signed_token=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange")
      #     #echo $signed_token | base64 -w 0 | base64 -w 0          

  
#   job2:
#     runs-on: ubuntu-latest
#     if: true
#     outputs:
#       job3_should_run: ${{ steps.step2.outputs.job3_should_run }}
#     needs: job1
#     steps:
#       - name: Step 2
#         id: step2
#         run: echo job3_should_run=false >> $GITHUB_OUTPUT

#   job3:
#     runs-on: ubuntu-latest
#     needs: [job2]
#     if: ${{ needs.job2.outputs.job3_should_run == 'true' }}
#     steps:
#       - name: Step 3
#         run: exit 0

#   job4:
#     runs-on: ubuntu-latest
#     needs: [job2]
#     if: ${{ needs.job2.outputs.job3_should_run == 'false' }}
#     steps:
#       - name: Step 3
#         run: exit 0

#   job5:
#     runs-on: ubuntu-latest
#     if: |
#       always() && 
#       needs.job1.result == 'success' && 
#       (needs.job2.result == 'success' || needs.job2.result == 'skipped') &&
#       (needs.job3.result == 'success' || needs.job4.result == 'success')
#     needs: [job1, job2, job3, job4]
#     steps:
#       - name: Step 3
#         run: echo "This is job 3"
    

